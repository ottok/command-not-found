--- a/CommandNotFound/CommandNotFound.py
+++ b/CommandNotFound/CommandNotFound.py
@@ -53,7 +53,11 @@ def user_can_sudo():
 dbpath = "/var/lib/command-not-found/commands.db"
 # the legacy DB shipped in the command-not-found-data package
 legacy_db = "/usr/share/command-not-found/commands.db"
-        
+
+
+class NoDatabaseError(Exception):
+    pass
+
 
 class CommandNotFound(object):
 
@@ -74,13 +78,17 @@ class CommandNotFound(object):
 
     output_fd = sys.stderr
 
-    def __init__(self, data_dir="/var/cache/command-not-found"):
+    def __init__(self, data_dir="/var/cache/command-not-found", do_raise=False):
         self.sources_list = self._getSourcesList()
         # a new style DB means we can skip loading the old legacy static DB
         if os.path.exists(dbpath):
             self.db = SqliteDatabase(dbpath)
         elif os.path.exists(legacy_db):
             self.db = SqliteDatabase(legacy_db)
+        elif do_raise:
+            raise NoDatabaseError(
+                _("Could not find the database of available applications, "
+                  "run update-command-not-found as root to fix this"))
         self.user_can_sudo = user_can_sudo()
         self.euid = posix.geteuid()
 
--- a/command-not-found
+++ b/command-not-found
@@ -86,7 +86,10 @@ def main():
                       help=_("don't print '<command-name>: command not found'"))
     (options, args) = parser.parse_args()
     if len(args) == 1:
-        cnf = CommandNotFound.CommandNotFound(options.data_dir)
+        try:
+            cnf = CommandNotFound.CommandNotFound(options.data_dir, do_raise=True)
+        except CommandNotFound.NoDatabaseError as e:
+            print(e)
         if not cnf.advise(args[0], options.ignore_installed) and not options.no_failure_msg:
             print(_("%s: command not found") % args[0], file=sys.stderr)
 
